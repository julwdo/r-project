)),
numericInput("employ", "Years with Current Employer:", 2),
numericInput("address", "Years at Current Address:", 3),
numericInput("income", "Household Income (in thousands):", 50),
numericInput("debtinc", "Debt to Income Ratio (x100):", 20),
numericInput("creddebt", "Credit Card Debt (in thousands):", 5),
numericInput("othdebt", "Other Debt (in thousands):", 10),
actionButton("predictBtn", "Predict")
),
mainPanel(
h4("Prediction Result"),
textOutput("predictionText"),
shinyjs::hidden(
div(id = "loading_spinner", class = "shiny-progress"),
h5("Loading...", align = "center")
)
)
)
)
library(shinyjs)
# Loading required library
library(shiny)
library(shinythemes)
library(shinyjs)
# Shiny App
ui <- fluidPage(
useShinyjs(),
theme = shinytheme("flatly"),
titlePanel("Default Prediction App"),
sidebarLayout(
sidebarPanel(
h4("Enter Customer Information"),
numericInput("age", "Age:", 25),
selectInput("ed", "Education:", c(
"Did not complete high school",
"High school degree",
"Some college",
"College degree",
"Post-undergraduate degree"
)),
numericInput("employ", "Years with Current Employer:", 2),
numericInput("address", "Years at Current Address:", 3),
numericInput("income", "Household Income (in thousands):", 50),
numericInput("debtinc", "Debt to Income Ratio (x100):", 20),
numericInput("creddebt", "Credit Card Debt (in thousands):", 5),
numericInput("othdebt", "Other Debt (in thousands):", 10),
actionButton("predictBtn", "Predict")
),
mainPanel(
h4("Prediction Result"),
textOutput("predictionText"),
shinyjs::hidden(
div(id = "loading_spinner", class = "shiny-progress"),
h5("Loading...", align = "center")
)
)
)
)
server <- function(input, output) {
observeEvent(input$predictBtn, {
shinyjs::enable("predictBtn", disable = TRUE)
# Prepare input data for prediction
new_customer <- data.frame(
age = input$age,
ed_2 = ifelse(input$ed == "High school degree", 1, 0),
employ = input$employ,
address = input$address,
income = input$income,
debtinc = input$debtinc,
creddebt = input$creddebt,
othdebt = input$othdebt
)
# Make predictions
prediction <- predict(lr.reduced, newdata = new_customer, type = "response")
# Display prediction
output$predictionText <- renderText({
if (prediction > 0.5) {
"Prediction: Will Default"
} else {
"Prediction: Will Not Default"
}
})
shinyjs::enable("predictBtn", disable = FALSE)
})
}
shinyApp(ui, server)
# Loading required library
library(shiny)
library(shinythemes)
library(shinyjs)
# Shiny App
ui <- fluidPage(
useShinyjs(),
theme = shinytheme("flatly"),
titlePanel("Default Prediction App"),
sidebarLayout(
sidebarPanel(
h4("Enter Customer Information"),
numericInput("age", "Age:", 25),
selectInput("ed", "Education:", c(
"Did not complete high school",
"High school degree",
"Some college",
"College degree",
"Post-undergraduate degree"
)),
numericInput("employ", "Years with Current Employer:", 2),
numericInput("address", "Years at Current Address:", 3),
numericInput("income", "Household Income (in thousands):", 50),
numericInput("debtinc", "Debt to Income Ratio (x100):", 20),
numericInput("creddebt", "Credit Card Debt (in thousands):", 5),
numericInput("othdebt", "Other Debt (in thousands):", 10),
actionButton("predictBtn", "Predict")
),
mainPanel(
h4("Prediction Result"),
textOutput("predictionText"),
shinyjs::hidden(
div(id = "loading_spinner", class = "shiny-progress"),
h5("Loading...", align = "center")
)
)
)
)
server <- function(input, output) {
observeEvent(input$predictBtn, {
shinyjs::enable("predictBtn", disable = TRUE)
# Prepare input data for prediction
new_customer <- data.frame(
age = input$age,
ed_2 = ifelse(input$ed == "High school degree", 1, 0),
employ = input$employ,
address = input$address,
income = input$income,
debtinc = input$debtinc,
creddebt = input$creddebt,
othdebt = input$othdebt
)
# Make predictions
prediction <- predict(lr.reduced, newdata = new_customer, type = "response")
# Display prediction
output$predictionText <- renderText({
if (prediction > 0.5) {
cat("Prediction: Will Default", paste("Probability of Default:", round(prediction, 3)), sep = "\n")
} else {
cat("Prediction: Will Not Default", paste("Probability of Default:", round(prediction, 3)), sep = "\n")
}
})
shinyjs::enable("predictBtn", disable = FALSE)
})
}
shinyApp(ui, server)
# Loading required library
library(shiny)
library(shinythemes)
library(shinyjs)
# Shiny App
ui <- fluidPage(
useShinyjs(),
theme = shinytheme("flatly"),
titlePanel("Default Prediction App"),
sidebarLayout(
sidebarPanel(
h4("Enter Customer Information"),
numericInput("age", "Age:", 25),
selectInput("ed", "Education:", c(
"Did not complete high school",
"High school degree",
"Some college",
"College degree",
"Post-undergraduate degree"
)),
numericInput("employ", "Years with Current Employer:", 2),
numericInput("address", "Years at Current Address:", 3),
numericInput("income", "Household Income (in thousands):", 50),
numericInput("debtinc", "Debt to Income Ratio (x100):", 20),
numericInput("creddebt", "Credit Card Debt (in thousands):", 5),
numericInput("othdebt", "Other Debt (in thousands):", 10),
actionButton("predictBtn", "Predict")
),
mainPanel(
h4("Prediction Result"),
textOutput("predictionText"),
shinyjs::hidden(
div(id = "loading_spinner", class = "shiny-progress"),
h5("Loading...", align = "center")
)
)
)
)
server <- function(input, output) {
observeEvent(input$predictBtn, {
shinyjs::enable("predictBtn", disable = FALSE)
# Prepare input data for prediction
new_customer <- data.frame(
age = input$age,
ed_2 = ifelse(input$ed == "High school degree", 1, 0),
employ = input$employ,
address = input$address,
income = input$income,
debtinc = input$debtinc,
creddebt = input$creddebt,
othdebt = input$othdebt
)
# Make predictions
prediction <- predict(lr.reduced, newdata = new_customer, type = "response")
# Display prediction
output$predictionText <- renderText({
if (prediction > 0.5) {
cat("Prediction: Will Default", paste("Probability of Default:", round(prediction, 3)), sep = "\n")
} else {
cat("Prediction: Will Not Default", paste("Probability of Default:", round(prediction, 3)), sep = "\n")
}
})
shinyjs::enable("predictBtn", disable = TRUE)
})
}
shinyApp(ui, server)
# Loading required library
library(shiny)
library(shinythemes)
library(shinyjs)
# Shiny App
ui <- fluidPage(
useShinyjs(),
theme = shinytheme("flatly"),
titlePanel("Default Prediction App"),
sidebarLayout(
sidebarPanel(
h4("Enter Customer Information"),
numericInput("age", "Age:", 25),
selectInput("ed", "Education:", c(
"Did not complete high school",
"High school degree",
"Some college",
"College degree",
"Post-undergraduate degree"
)),
numericInput("employ", "Years with Current Employer:", 2),
numericInput("address", "Years at Current Address:", 3),
numericInput("income", "Household Income (in thousands):", 50),
numericInput("debtinc", "Debt to Income Ratio (x100):", 20),
numericInput("creddebt", "Credit Card Debt (in thousands):", 5),
numericInput("othdebt", "Other Debt (in thousands):", 10),
actionButton("predictBtn", "Predict")
),
mainPanel(
h4("Prediction Result"),
textOutput("predictionText"),
shinyjs::hidden(
div(id = "loading_spinner", class = "shiny-progress"),
h5("Loading...", align = "center")
)
)
)
)
server <- function(input, output) {
observeEvent(input$predictBtn, {
# Prepare input data for prediction
new_customer <- data.frame(
age = input$age,
ed_2 = ifelse(input$ed == "High school degree", 1, 0),
employ = input$employ,
address = input$address,
income = input$income,
debtinc = input$debtinc,
creddebt = input$creddebt,
othdebt = input$othdebt
)
# Make predictions
prediction <- predict(lr.reduced, newdata = new_customer, type = "response")
# Display prediction
output$predictionText <- renderText({
if (prediction > 0.5) {
cat("Prediction: Will Default", paste("Probability of Default:", round(prediction, 3)), sep = "\n")
} else {
cat("Prediction: Will Not Default", paste("Probability of Default:", round(prediction, 3)), sep = "\n")
}
})
})
}
shinyApp(ui, server)
# Loading required library
library(shiny)
library(shinythemes)
library(shinyjs)
# Shiny App
ui <- fluidPage(
useShinyjs(),
theme = shinytheme("flatly"),
titlePanel("Default Prediction App"),
sidebarLayout(
sidebarPanel(
h4("Enter Customer Information"),
numericInput("age", "Age:", 25),
selectInput("ed", "Education:", c(
"Did not complete high school",
"High school degree",
"Some college",
"College degree",
"Post-undergraduate degree"
)),
numericInput("employ", "Years with Current Employer:", 2),
numericInput("address", "Years at Current Address:", 3),
numericInput("income", "Household Income (in thousands):", 50),
numericInput("debtinc", "Debt to Income Ratio (x100):", 20),
numericInput("creddebt", "Credit Card Debt (in thousands):", 5),
numericInput("othdebt", "Other Debt (in thousands):", 10),
actionButton("predictBtn", "Predict")
),
mainPanel(
h4("Prediction Result"),
textOutput("predictionText"),
textOutput("probabilityText"),
shinyjs::hidden(
div(id = "loading_spinner", class = "shiny-progress"),
h5("Loading...", align = "center")
)
)
)
)
server <- function(input, output) {
observeEvent(input$predictBtn, {
# Prepare input data for prediction
new_customer <- data.frame(
age = input$age,
ed_2 = ifelse(input$ed == "High school degree", 1, 0),
employ = input$employ,
address = input$address,
income = input$income,
debtinc = input$debtinc,
creddebt = input$creddebt,
othdebt = input$othdebt
)
# Make predictions
prediction <- predict(lr.reduced, newdata = new_customer, type = "response")
# Display prediction
output$predictionText <- renderText({
if (prediction > 0.5) {
return("Prediction: Will Default")
} else {
return("Prediction: Will Not Default")
}
})
# Display probability
output$probabilityText <- renderText({
paste("Probability of Default:", round(prediction, 3))
})
})
}
shinyApp(ui, server)
# Loading required library
library(shiny)
library(shinythemes)
library(shinyjs)
# Shiny App
ui <- fluidPage(
useShinyjs(),
theme = shinytheme("flatly"),
titlePanel("Default Prediction App"),
sidebarLayout(
sidebarPanel(
width = 3,  # Adjust the width of the sidebar
h4("Enter Customer Information"),
numericInput("age", "Age:", 25),
selectInput("ed", "Education:", c(
"Did not complete high school",
"High school degree",
"Some college",
"College degree",
"Post-undergraduate degree"
)),
numericInput("employ", "Years with Current Employer:", 2),
numericInput("address", "Years at Current Address:", 3),
numericInput("income", "Household Income (in thousands):", 50),
numericInput("debtinc", "Debt to Income Ratio (x100):", 20),
numericInput("creddebt", "Credit Card Debt (in thousands):", 5),
numericInput("othdebt", "Other Debt (in thousands):", 10),
actionButton("predictBtn", "Predict")
),
mainPanel(
width = 9,  # Adjust the width of the main panel
h4("Prediction Result"),
fluidRow(
column(6, textOutput("predictionText")),
column(6, textOutput("probabilityText"))
),
shinyjs::hidden(
div(id = "loading_spinner", class = "shiny-progress"),
h5("Loading...", align = "center")
)
)
)
)
server <- function(input, output) {
observeEvent(input$predictBtn, {
# Prepare input data for prediction
new_customer <- data.frame(
age = input$age,
ed_2 = ifelse(input$ed == "High school degree", 1, 0),
employ = input$employ,
address = input$address,
income = input$income,
debtinc = input$debtinc,
creddebt = input$creddebt,
othdebt = input$othdebt
)
# Make predictions
prediction <- predict(lr.reduced, newdata = new_customer, type = "response")
# Display prediction
output$predictionText <- renderText({
if (prediction > 0.5) {
return("Prediction: Will Default")
} else {
return("Prediction: Will Not Default")
}
})
# Display probability
output$probabilityText <- renderText({
paste("Probability of Default:", round(prediction, 3))
})
})
}
shinyApp(ui, server)
# Loading required libraries
library(foreign)
library(dplyr)
library(ggplot2)
library(lmtest)
library(sandwich)
library(randomForest)
library(caret)
library(xgboost)
library(pROC)
# Loading the data set
path <- "D:/Studies/Materials/Second-cycle/I year/I semester/Coding for DS and DM/R/r-project"
data <- read.spss("bankloan.sav", to.data.frame = TRUE) %>%
select(
-matches("preddef")
)
# Summary statistics
summary(data)
# Missing values
sapply(data, function(x) sum(is.na(x)))
colSums(is.na(data))
str(data)
# Creating binary variables out of "ed" and "default"
data <- data %>%
mutate(
ed_1 = as.factor(ed == "Did not complete high school"),
ed_2 = as.integer(ed == "High school degree"),
ed_3 = as.integer(ed == "Some college"),
ed_4 = as.integer(ed == "College degree"),
ed_5 = as.integer(ed == "Post-undergraduate degree"),
default_num = as.integer(default == "Yes")
)
View(data)
default_num = as.factor(as.numeric(as.integer(default == "Yes"))
View(data)
# Creating binary variables out of "ed" and "default"
data <- data %>%
mutate(
ed_1 = as.factor(as.numeric(ed == "Did not complete high school")),
ed_2 = as.factor(as.numeric(ed == "High school degree")),
ed_3 = as.factor(as.numeric(ed == "Some college")),
ed_4 = as.factor(as.numeric(ed == "College degree")),
ed_5 = as.factor(as.numeric(ed == "Post-undergraduate degree")),
default_num = as.factor(as.numeric(default == "Yes"))
)
nrow(data.1)
# Preparing data for estimation
data.1 <- data %>%
select(-ed, -ed_1, -default) %>% # Remove "ed_1" to avoid perfect multicollinearity
filter(!is.na(default_num))
nrow(data.1)
indices <- sample(seq_len(nrow(data.1)), size = 0.7*nrow(data.1))
indices1 <- sample(nrow(data.1), size = 0.7*nrow(data.1))
indices
indices1
# Splitting the data into training and testing sets
set.seed(123)
indices <- sample(seq_len(nrow(data.1)), size = 0.7*nrow(data.1))
indices1 <- sample(nrow(data.1), size = 0.7*nrow(data.1))
indices
indices1
seq_len(nrow(data.1))
nrow(data.1)
indices <- sample(nrow(data.1), size = 0.7*nrow(data.1))
data.train <- data.1[indices, ]
data.test <- data.1[-indices, ]
dim(data.train)
dim(data.test)
View(data.train)
cor(data.train %>% select(-default_num))
library(correlation)
install.packages("correlation")
# Correlation between independent variables
data.train %>% select(-default_num) %>% correlation()
library(correlation)
# Correlation between independent variables
data.train %>% select(-default_num) %>% correlation()
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
# Classification tree
full.rpart <- rpart(data = data.train, default_num ~ ., method = 'class')
install.packages("rpart")
install.packages("rpart")
library(rpart)
# Classification tree
full.rpart <- rpart(data = data.train, default_num ~ ., method = 'class')
library(rpart)
